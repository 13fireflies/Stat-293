source("~/GitHub/Stat-293/shortreed_suppdata_code.r", echo=TRUE)
source("~/GitHub/Stat-293/shortreed_suppdata_code.r", echo=TRUE)
?lqa
methods(lqa)
source("~/GitHub/Stat-293/shortreed_suppdata_code.r", echo=TRUE)
methods(lqa)
?methods
?lqa
lqa.formula
### run outcome-adaptive lasso model with appropriate penalty
logit_oal = lqa.formula(w.full.form, data=Data, penalty=oal_pen, family=binomial(logit))
# print out wAMD for all the lambda values tried
wAMD_vec
for( lil in names(lambda_vec) ){
il = lambda_vec[lil]
ig = gamma_vals[lil]
### create the outcome adaptive lasso penalty with coefficient specific weights determined by outcome model
oal_pen = adaptive.lasso(lambda=n^(il), al.weights = abs(betaXY)^(-ig))
### run outcome-adaptive lasso model with appropriate penalty
logit_oal = lqa.formula(w.full.form, data=Data, penalty=oal_pen, family=binomial(logit))
# generate propensity score
Data[,paste("f.pA",lil,sep="")] = predict(logit_oal)$mu.new
# save propensity score coefficients
coeff_XA[var.list,lil] = coef(logit_oal)[var.list]
# create inverse probability of treatment weights
Data[,paste("w",lil,sep="")] = create_weights(fp=Data[,paste("f.pA",lil,sep="")],fA=Data$A)
# estimate weighted absolute mean different over all covaraites using this lambda to generate weights
wAMD_vec[lil] = wAMD_function(DataM=Data,varlist=var.list,trt.var="A",
wgt=paste("w",lil,sep=""),beta=betaXY)$wAMD
# save ATE estimate for this lambda value
ATE[lil] = ATE_est(fY=Data$Y,fw=Data[,paste("w",lil,sep="")],fA=Data$A)
} # close loop through lambda values
# generate propensity score
print(predict(logit_oal))
# generate propensity score
print(predict(logit_oal)$mu.new)
# generate propensity score
print(logit_oal)
print(paste("f.pA",lil,sep=""))
# generate propensity score
print(logit_oal)
# generate propensity score
print(typeof(logit_oal))
print(class(logit_oal))
source("~/GitHub/Stat-293/shortreed_suppdata_code.r", echo=TRUE)
